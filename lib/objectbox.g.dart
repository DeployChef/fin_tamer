// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart' as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/account/data/local/entities/account_entity.dart';
import 'features/account/data/local/entities/stat_item_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 4184324922779376647),
    name: 'AccountEntity',
    lastPropertyId: const obx_int.IdUid(7, 3723387938336280827),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2409324048533550071),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6067831564966800248),
        name: 'userId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5931921984227595126),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6401017984614174097),
        name: 'balance',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7227130836619366336),
        name: 'currency',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3501817314430306865),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3723387938336280827),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'incomeStats',
        srcEntity: 'StatItemEntity',
        srcField: 'account',
      ),
      obx_int.ModelBacklink(
        name: 'expenseStats',
        srcEntity: 'StatItemEntity',
        srcField: 'account',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 4997635429375364018),
    name: 'StatItemEntity',
    lastPropertyId: const obx_int.IdUid(6, 6922564085595008223),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8869011092584133625),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 9128953702729066187),
        name: 'categoryId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1847400823823542275),
        name: 'categoryName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1645820557717940178),
        name: 'emoji',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3733016997206402289),
        name: 'amount',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6922564085595008223),
        name: 'accountId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 2005279266660496490),
        relationTarget: 'AccountEntity',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(2, 4997635429375364018),
    lastIndexId: const obx_int.IdUid(1, 2005279266660496490),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    AccountEntity: obx_int.EntityDefinition<AccountEntity>(
      model: _entities[0],
      toOneRelations: (AccountEntity object) => [],
      toManyRelations: (AccountEntity object) => {
        obx_int.RelInfo<StatItemEntity>.toOneBacklink(
          6,
          object.id,
          (StatItemEntity srcObject) => srcObject.account,
        ): object.incomeStats,
        obx_int.RelInfo<StatItemEntity>.toOneBacklink(
          6,
          object.id,
          (StatItemEntity srcObject) => srcObject.account,
        ): object.expenseStats,
      },
      getId: (AccountEntity object) => object.id,
      setId: (AccountEntity object, int id) {
        object.id = id;
      },
      objectToFB: (AccountEntity object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final balanceOffset = fbb.writeString(object.balance);
        final currencyOffset = fbb.writeString(object.currency);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.userId);
        fbb.addOffset(2, nameOffset);
        fbb.addOffset(3, balanceOffset);
        fbb.addOffset(4, currencyOffset);
        fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(6, object.updatedAt.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final userIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final balanceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final currencyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
        );
        final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
        );
        final object = AccountEntity(
          id: idParam,
          userId: userIdParam,
          name: nameParam,
          balance: balanceParam,
          currency: currencyParam,
          createdAt: createdAtParam,
          updatedAt: updatedAtParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<AccountEntity>(
          object.incomeStats,
          store,
          obx_int.RelInfo<StatItemEntity>.toOneBacklink(
            6,
            object.id,
            (StatItemEntity srcObject) => srcObject.account,
          ),
        );
        obx_int.InternalToManyAccess.setRelInfo<AccountEntity>(
          object.expenseStats,
          store,
          obx_int.RelInfo<StatItemEntity>.toOneBacklink(
            6,
            object.id,
            (StatItemEntity srcObject) => srcObject.account,
          ),
        );
        return object;
      },
    ),
    StatItemEntity: obx_int.EntityDefinition<StatItemEntity>(
      model: _entities[1],
      toOneRelations: (StatItemEntity object) => [object.account],
      toManyRelations: (StatItemEntity object) => {},
      getId: (StatItemEntity object) => object.id,
      setId: (StatItemEntity object, int id) {
        object.id = id;
      },
      objectToFB: (StatItemEntity object, fb.Builder fbb) {
        final categoryNameOffset = fbb.writeString(object.categoryName);
        final emojiOffset = fbb.writeString(object.emoji);
        final amountOffset = fbb.writeString(object.amount);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.categoryId);
        fbb.addOffset(2, categoryNameOffset);
        fbb.addOffset(3, emojiOffset);
        fbb.addOffset(4, amountOffset);
        fbb.addInt64(5, object.account.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final categoryIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final categoryNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final emojiParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final amountParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final object = StatItemEntity(
          id: idParam,
          categoryId: categoryIdParam,
          categoryName: categoryNameParam,
          emoji: emojiParam,
          amount: amountParam,
        );
        object.account.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        object.account.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AccountEntity] entity fields to define ObjectBox queries.
class AccountEntity_ {
  /// See [AccountEntity.id].
  static final id = obx.QueryIntegerProperty<AccountEntity>(
    _entities[0].properties[0],
  );

  /// See [AccountEntity.userId].
  static final userId = obx.QueryIntegerProperty<AccountEntity>(
    _entities[0].properties[1],
  );

  /// See [AccountEntity.name].
  static final name = obx.QueryStringProperty<AccountEntity>(
    _entities[0].properties[2],
  );

  /// See [AccountEntity.balance].
  static final balance = obx.QueryStringProperty<AccountEntity>(
    _entities[0].properties[3],
  );

  /// See [AccountEntity.currency].
  static final currency = obx.QueryStringProperty<AccountEntity>(
    _entities[0].properties[4],
  );

  /// See [AccountEntity.createdAt].
  static final createdAt = obx.QueryDateProperty<AccountEntity>(
    _entities[0].properties[5],
  );

  /// See [AccountEntity.updatedAt].
  static final updatedAt = obx.QueryDateProperty<AccountEntity>(
    _entities[0].properties[6],
  );

  /// see [AccountEntity.incomeStats]
  static final incomeStats = obx.QueryBacklinkToMany<StatItemEntity, AccountEntity>(
    StatItemEntity_.account,
  );

  /// see [AccountEntity.expenseStats]
  static final expenseStats = obx.QueryBacklinkToMany<StatItemEntity, AccountEntity>(
    StatItemEntity_.account,
  );
}

/// [StatItemEntity] entity fields to define ObjectBox queries.
class StatItemEntity_ {
  /// See [StatItemEntity.id].
  static final id = obx.QueryIntegerProperty<StatItemEntity>(
    _entities[1].properties[0],
  );

  /// See [StatItemEntity.categoryId].
  static final categoryId = obx.QueryIntegerProperty<StatItemEntity>(
    _entities[1].properties[1],
  );

  /// See [StatItemEntity.categoryName].
  static final categoryName = obx.QueryStringProperty<StatItemEntity>(
    _entities[1].properties[2],
  );

  /// See [StatItemEntity.emoji].
  static final emoji = obx.QueryStringProperty<StatItemEntity>(
    _entities[1].properties[3],
  );

  /// See [StatItemEntity.amount].
  static final amount = obx.QueryStringProperty<StatItemEntity>(
    _entities[1].properties[4],
  );

  /// See [StatItemEntity.account].
  static final account = obx.QueryRelationToOne<StatItemEntity, AccountEntity>(
    _entities[1].properties[5],
  );
}
