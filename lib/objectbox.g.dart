// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/category/data/local/entities/category_entity.dart';
import 'features/history/data/local/entities/history_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 7272498888885002791),
    name: 'CategoryEntity',
    lastPropertyId: const obx_int.IdUid(5, 2164722955887051621),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4991616021255689001),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7279879373140819955),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1452561443527565598),
        name: 'emoji',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5572852441722186374),
        name: 'isIncome',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2164722955887051621),
        name: 'apiId',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 7951609919812821731),
    name: 'HistoryEntity',
    lastPropertyId: const obx_int.IdUid(8, 27775157830502293),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4023632695592437656),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3960312945438535773),
        name: 'apiId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6929800089414226823),
        name: 'accountId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 9043974459244823721),
        name: 'changeType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 725969776815586734),
        name: 'previousStateJson',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6549160774005160476),
        name: 'newStateJson',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 325875762559090582),
        name: 'changeTimestamp',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 27775157830502293),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(4, 7951609919812821731),
    lastIndexId: const obx_int.IdUid(1, 2005279266660496490),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [4184324922779376647, 4997635429375364018],
    retiredIndexUids: const [],
    retiredPropertyUids: const [
      6067831564966800248,
      2409324048533550071,
      5931921984227595126,
      6401017984614174097,
      7227130836619366336,
      3501817314430306865,
      3723387938336280827,
      8869011092584133625,
      9128953702729066187,
      1847400823823542275,
      1645820557717940178,
      3733016997206402289,
      6922564085595008223,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    CategoryEntity: obx_int.EntityDefinition<CategoryEntity>(
      model: _entities[0],
      toOneRelations: (CategoryEntity object) => [],
      toManyRelations: (CategoryEntity object) => {},
      getId: (CategoryEntity object) => object.id,
      setId: (CategoryEntity object, int id) {
        object.id = id;
      },
      objectToFB: (CategoryEntity object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final emojiOffset = fbb.writeString(object.emoji);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, emojiOffset);
        fbb.addBool(3, object.isIncome);
        fbb.addInt64(4, object.apiId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final apiIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final emojiParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final isIncomeParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          10,
          false,
        );
        final object = CategoryEntity(
          id: idParam,
          apiId: apiIdParam,
          name: nameParam,
          emoji: emojiParam,
          isIncome: isIncomeParam,
        );

        return object;
      },
    ),
    HistoryEntity: obx_int.EntityDefinition<HistoryEntity>(
      model: _entities[1],
      toOneRelations: (HistoryEntity object) => [],
      toManyRelations: (HistoryEntity object) => {},
      getId: (HistoryEntity object) => object.id,
      setId: (HistoryEntity object, int id) {
        object.id = id;
      },
      objectToFB: (HistoryEntity object, fb.Builder fbb) {
        final changeTypeOffset = fbb.writeString(object.changeType);
        final previousStateJsonOffset = fbb.writeString(
          object.previousStateJson,
        );
        final newStateJsonOffset = fbb.writeString(object.newStateJson);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.apiId);
        fbb.addInt64(2, object.accountId);
        fbb.addOffset(3, changeTypeOffset);
        fbb.addOffset(4, previousStateJsonOffset);
        fbb.addOffset(5, newStateJsonOffset);
        fbb.addInt64(6, object.changeTimestamp.millisecondsSinceEpoch);
        fbb.addInt64(7, object.createdAt.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final apiIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final accountIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final changeTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final previousStateJsonParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final newStateJsonParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final changeTimestampParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
        );
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
        );
        final object = HistoryEntity(
          id: idParam,
          apiId: apiIdParam,
          accountId: accountIdParam,
          changeType: changeTypeParam,
          previousStateJson: previousStateJsonParam,
          newStateJson: newStateJsonParam,
          changeTimestamp: changeTimestampParam,
          createdAt: createdAtParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CategoryEntity] entity fields to define ObjectBox queries.
class CategoryEntity_ {
  /// See [CategoryEntity.id].
  static final id = obx.QueryIntegerProperty<CategoryEntity>(
    _entities[0].properties[0],
  );

  /// See [CategoryEntity.name].
  static final name = obx.QueryStringProperty<CategoryEntity>(
    _entities[0].properties[1],
  );

  /// See [CategoryEntity.emoji].
  static final emoji = obx.QueryStringProperty<CategoryEntity>(
    _entities[0].properties[2],
  );

  /// See [CategoryEntity.isIncome].
  static final isIncome = obx.QueryBooleanProperty<CategoryEntity>(
    _entities[0].properties[3],
  );

  /// See [CategoryEntity.apiId].
  static final apiId = obx.QueryIntegerProperty<CategoryEntity>(
    _entities[0].properties[4],
  );
}

/// [HistoryEntity] entity fields to define ObjectBox queries.
class HistoryEntity_ {
  /// See [HistoryEntity.id].
  static final id = obx.QueryIntegerProperty<HistoryEntity>(
    _entities[1].properties[0],
  );

  /// See [HistoryEntity.apiId].
  static final apiId = obx.QueryIntegerProperty<HistoryEntity>(
    _entities[1].properties[1],
  );

  /// See [HistoryEntity.accountId].
  static final accountId = obx.QueryIntegerProperty<HistoryEntity>(
    _entities[1].properties[2],
  );

  /// See [HistoryEntity.changeType].
  static final changeType = obx.QueryStringProperty<HistoryEntity>(
    _entities[1].properties[3],
  );

  /// See [HistoryEntity.previousStateJson].
  static final previousStateJson = obx.QueryStringProperty<HistoryEntity>(
    _entities[1].properties[4],
  );

  /// See [HistoryEntity.newStateJson].
  static final newStateJson = obx.QueryStringProperty<HistoryEntity>(
    _entities[1].properties[5],
  );

  /// See [HistoryEntity.changeTimestamp].
  static final changeTimestamp = obx.QueryDateProperty<HistoryEntity>(
    _entities[1].properties[6],
  );

  /// See [HistoryEntity.createdAt].
  static final createdAt = obx.QueryDateProperty<HistoryEntity>(
    _entities[1].properties[7],
  );
}
